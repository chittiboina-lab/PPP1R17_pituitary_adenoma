WorkingList <- vector("list", dim(running.normalized)[2])
for ( i in 1:dim(running.normalized)[2]) {
WorkingList[[i]] <- as.numeric(running.normalized[,i])
}
boxplot(WorkingList,col=col.2.use,outline=FALSE,xlab="Sample Index",ylab="CyclicLoess(Log2(Detection Value+2))")
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(15,15))
pdf("post_norm_box_total.pdf")
#------------------------------------------------------------------------------
# Post normalization PCA plot
#------------------------------------------------------------------------------
pca.results <- princomp(running.normalized,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
pdf("postnorm_PCA_total.pdf")
#-------------------------------------------------------------------------------
# Perform Noise Modeling
#-------------------------------------------------------------------------------
group1 <- running.normalized[,col.2.use==3]
g1.mean <- apply(group1,1,mean)
g1.sd <- apply(group1,1,sd)
g1.cv <- (g1.sd/g1.mean)*100
lowess.g1 <- lowess(g1.cv~g1.mean,f=1/32)
group2 <- running.normalized[,col.2.use==2]
g2.mean <- apply(group2,1,mean)
g2.sd <- apply(group2,1,sd)
g2.cv <- (g2.sd/g2.mean)*100
lowess.g2 <- lowess(g2.cv~g2.mean,f=1/32)
#-------------------------------------------------------------------------------
# Generate Noise Model Plot
#-------------------------------------------------------------------------------
xrange <- range(c(1:12))
yrange <- range(c(0:25))
plot(xrange,yrange,type='n',xlab="Mean(CyclicLoess(Log2(Detection Value+2)))",ylab="Coefficient of Variation")
points(g1.mean,g1.cv,pch=21,col=8)
points(g2.mean,g2.cv,pch=21,col=8)
lines(lowess.g1,col=3,lwd=2)
lines(lowess.g2,col=2,lwd=2)
abline(h=0)
abline(v=4.5,lty=2,lwd=2)
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),lty=1,lwd=2)
pdf("Noise_total.pdf")
#-------------------------------------------------------------------------------
# Remove Noise & Floor
#-------------------------------------------------------------------------------
noise.pick <- 4.5
dim(running.normalized)
rrr <- running.normalized
rrr <- ifelse(rrr<noise.pick,noise.pick,rrr)
temp <- apply(rrr,1,mean)>noise.pick
Final.working.data <- rrr[temp,]
dim(Final.working.data)
write.table(Final.working.data,"Final.working.data_total.txt",sep="\t")
#------------------------------------------------------------------------------
# Post noise PCA plot
#------------------------------------------------------------------------------
pca.results <- princomp(Final.working.data,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
pdf("post_noise_PCA_total.pdf")
#-------------------------------------------------------------------------------
# Significance Testing
#-------------------------------------------------------------------------------
# Added paired = T for pairwise T test instead of welch
running.pvs <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- as.numeric(Final.working.data[i,c(1:3)])
temp2 <- as.numeric(Final.working.data[i,c(4:6)])
temp3 <- t.test(temp1,temp2,paired = T)
temp4 <- temp3$p.value
temp5 <- mean(temp1)-mean(temp2) #flipped for cushings vs control
temp6 <- 2^temp5
temp7 <- ifelse(temp6<1,-1/temp6,temp6)
running.pvs <- rbind(running.pvs,c(temp7,abs(temp7),temp4))
}
dimnames(running.pvs)[[1]] <- dimnames(Final.working.data)[[1]]
running.means <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- mean(as.numeric(Final.working.data[i,c(1:3)]))
temp2 <- mean(as.numeric(Final.working.data[i,c(4:6)]))
running.means <- rbind(running.means,c(temp1,temp2))
}
dimnames(running.means)[[1]] <- dimnames(Final.working.data)[[1]]
write.table(running.means,"running.means_total.txt",sep="\t")
#-------------------------------------------------------------------------------
# FDR MCC (alpha=0.05)
#-------------------------------------------------------------------------------
temp1 <- mt.rawp2adjp(running.pvs[,3], proc="BH")
temp2 <- temp1$adj[order(temp1$index),]
temp2 <- as.data.frame(temp2)
running.pvs <- cbind(running.pvs,temp2[,2])
write.table(running.pvs,"MCC_Results_total.txt",sep="\t")
passing.mcc.frags <- dimnames(running.pvs[running.pvs[,4]<0.05,])[[1]]
length(passing.mcc.frags)
write.table(running.pvs, "running.pvs_pairwise_total.txt", sep = "\t")
#-------------------------------------------------------------------------------
# Generate Volcano Plot and PCA depicting Gene Selection for Class Differences
#-------------------------------------------------------------------------------
class.results.capture <- as.matrix(running.pvs)
coded.fc <- ifelse(class.results.capture[,2]>=1.5,1,0)
coded.pv <- ifelse(class.results.capture[,4]<0.05,1,0) #orig = ,4, 0.05
coded.pass <- coded.fc+coded.pv
coded.keepers <- names(coded.pass[coded.pass==2])
grab.keeper.info <- class.results.capture[coded.keepers,]
nochange <- dimnames(class.results.capture[setdiff(dimnames(class.results.capture)[[1]],coded.keepers),])[[1]]
up <- dimnames(grab.keeper.info[(grab.keeper.info[,1]>0),])[[1]]
down <- dimnames(grab.keeper.info[(grab.keeper.info[,1]<0),])[[1]]
xrange <- range(class.results.capture[,1])
yrange <- range(c(0,max(-log(class.results.capture[,4])+10)))
to.plot <- class.results.capture
plot(xrange,yrange,xlab="Linear Fold Change",ylab="-log(BH FDR Corrected P)",type='n',main="Ctrl vs CD")
points(to.plot[,1][nochange],-log(to.plot[,4][nochange]),col=8,cex=1.5,pch=19)
points(to.plot[,1][up],-log(to.plot[,4][up]),col=2,cex=1.5,pch=19)
points(to.plot[,1][down],-log(to.plot[,4][down]),col=3,cex=1.5,pch=19)
abline(v=-1)
abline(v=1)
abline(h=-log(0.05),lty=2)
abline(v=-1.5,lty=2)
abline(v=1.5,lty=2)
temp <- legend("topright", legend = c(" ", " ", " "),text.width=strwidth("100000000000"),pch=c(19,19,19),xjust=1,yjust=1,title="Difference",col=c(2,8,3),cex=1.5)
a <- paste(c("Up (n=",length(up),")"),collapse="")
b <- paste(c("None (n=",length(nochange),")"),collapse="")
c <- paste(c("Down (n=",length(down),")"),collapse="")
text(temp$rect$left + temp$rect$w, temp$text$y,c(a,b,c), pos = 2)
pdf("volcano_total.pdf")
rm(list = ls())
#------------------------------------------------------------------------------
# Import Data
#------------------------------------------------------------------------------
lll <- read.table("data/data_total.txt",header=T,row.names=1)
col.2.use <- c(rep(3,3),rep(2,3))
#------------------------------------------------------------------------------
# Impute Missing Data
#------------------------------------------------------------------------------
new.lll <- NULL
for(i in 1:dim(lll)[1]) {
temp1 <- as.numeric(lll[i,])
temp2 <- sum(is.na(temp1))
if(temp2>0) {
print(i)
temp3 <- mean(temp1,na.rm=T)
temp4 <- ifelse(is.na(temp1),temp3,temp1)
new.lll <- rbind(new.lll,temp4)
} else {
new.lll <- rbind(new.lll,temp1)
}
}
dimnames(new.lll) <- dimnames(lll)
#------------------------------------------------------------------------------
# Perform pedestal and transformation
#------------------------------------------------------------------------------
temp1 <- new.lll
temp1 <- log(temp1+2,2)
sample.data <- temp1
#------------------------------------------------------------------------------
# Pre-Normalization Box Plot
#------------------------------------------------------------------------------
WorkingList <- vector("list", dim(sample.data)[2])
for ( i in 1:dim(sample.data)[2]) {
WorkingList[[i]] <- as.numeric(sample.data[,i])
}
pdf("pre_norm_box_total.pdf")
boxplot(WorkingList,col=col.2.use,outline=FALSE,xlab="Sample Index",ylab="Log2(Detection Value+2)")
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(15,15))
dev.off()
#------------------------------------------------------------------------------
# Perform cross sample normalization
#------------------------------------------------------------------------------
running.normalized <- normalizeBetweenArrays(sample.data,"cyclicloess")
#------------------------------------------------------------------------------
# Post normaliation box plot
#------------------------------------------------------------------------------
WorkingList <- vector("list", dim(running.normalized)[2])
for ( i in 1:dim(running.normalized)[2]) {
WorkingList[[i]] <- as.numeric(running.normalized[,i])
}
pdf("post_norm_box_total.pdf")
boxplot(WorkingList,col=col.2.use,outline=FALSE,xlab="Sample Index",ylab="CyclicLoess(Log2(Detection Value+2))")
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(15,15))
dev.off()
#------------------------------------------------------------------------------
# Post normalization PCA plot
#------------------------------------------------------------------------------
pca.results <- princomp(running.normalized,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
pdf("postnorm_PCA_total.pdf")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
dev.off()
#-------------------------------------------------------------------------------
# Perform Noise Modeling
#-------------------------------------------------------------------------------
group1 <- running.normalized[,col.2.use==3]
g1.mean <- apply(group1,1,mean)
g1.sd <- apply(group1,1,sd)
g1.cv <- (g1.sd/g1.mean)*100
lowess.g1 <- lowess(g1.cv~g1.mean,f=1/32)
group2 <- running.normalized[,col.2.use==2]
g2.mean <- apply(group2,1,mean)
g2.sd <- apply(group2,1,sd)
g2.cv <- (g2.sd/g2.mean)*100
lowess.g2 <- lowess(g2.cv~g2.mean,f=1/32)
#-------------------------------------------------------------------------------
# Generate Noise Model Plot
#-------------------------------------------------------------------------------
xrange <- range(c(1:12))
yrange <- range(c(0:25))
pdf("Noise_total.pdf")
plot(xrange,yrange,type='n',xlab="Mean(CyclicLoess(Log2(Detection Value+2)))",ylab="Coefficient of Variation")
points(g1.mean,g1.cv,pch=21,col=8)
points(g2.mean,g2.cv,pch=21,col=8)
lines(lowess.g1,col=3,lwd=2)
lines(lowess.g2,col=2,lwd=2)
abline(h=0)
abline(v=4.5,lty=2,lwd=2)
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),lty=1,lwd=2)
dev.off()
#-------------------------------------------------------------------------------
# Remove Noise & Floor
#-------------------------------------------------------------------------------
noise.pick <- 4.5
dim(running.normalized)
rrr <- running.normalized
rrr <- ifelse(rrr<noise.pick,noise.pick,rrr)
temp <- apply(rrr,1,mean)>noise.pick
Final.working.data <- rrr[temp,]
dim(Final.working.data)
write.table(Final.working.data,"Final.working.data_total.txt",sep="\t")
#------------------------------------------------------------------------------
# Post noise PCA plot
#------------------------------------------------------------------------------
pca.results <- princomp(Final.working.data,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
pdf("post_noise_PCA_total.pdf")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
dev.off()
#-------------------------------------------------------------------------------
# Significance Testing
#-------------------------------------------------------------------------------
# Added paired = T for pairwise T test instead of welch
running.pvs <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- as.numeric(Final.working.data[i,c(1:3)])
temp2 <- as.numeric(Final.working.data[i,c(4:6)])
temp3 <- t.test(temp1,temp2,paired = T)
temp4 <- temp3$p.value
temp5 <- mean(temp1)-mean(temp2) #flipped for cushings vs control
temp6 <- 2^temp5
temp7 <- ifelse(temp6<1,-1/temp6,temp6)
running.pvs <- rbind(running.pvs,c(temp7,abs(temp7),temp4))
}
dimnames(running.pvs)[[1]] <- dimnames(Final.working.data)[[1]]
running.means <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- mean(as.numeric(Final.working.data[i,c(1:3)]))
temp2 <- mean(as.numeric(Final.working.data[i,c(4:6)]))
running.means <- rbind(running.means,c(temp1,temp2))
}
dimnames(running.means)[[1]] <- dimnames(Final.working.data)[[1]]
write.table(running.means,"running.means_total.txt",sep="\t")
#-------------------------------------------------------------------------------
# FDR MCC (alpha=0.05)
#-------------------------------------------------------------------------------
temp1 <- mt.rawp2adjp(running.pvs[,3], proc="BH")
temp2 <- temp1$adj[order(temp1$index),]
temp2 <- as.data.frame(temp2)
running.pvs <- cbind(running.pvs,temp2[,2])
write.table(running.pvs,"MCC_Results_total.txt",sep="\t")
passing.mcc.frags <- dimnames(running.pvs[running.pvs[,4]<0.05,])[[1]]
length(passing.mcc.frags)
write.table(running.pvs, "running.pvs_pairwise_total.txt", sep = "\t")
#-------------------------------------------------------------------------------
# Generate Volcano Plot and PCA depicting Gene Selection for Class Differences
#-------------------------------------------------------------------------------
class.results.capture <- as.matrix(running.pvs)
coded.fc <- ifelse(class.results.capture[,2]>=1.5,1,0)
coded.pv <- ifelse(class.results.capture[,4]<0.05,1,0) #orig = ,4, 0.05
coded.pass <- coded.fc+coded.pv
coded.keepers <- names(coded.pass[coded.pass==2])
grab.keeper.info <- class.results.capture[coded.keepers,]
nochange <- dimnames(class.results.capture[setdiff(dimnames(class.results.capture)[[1]],coded.keepers),])[[1]]
up <- dimnames(grab.keeper.info[(grab.keeper.info[,1]>0),])[[1]]
down <- dimnames(grab.keeper.info[(grab.keeper.info[,1]<0),])[[1]]
xrange <- range(class.results.capture[,1])
yrange <- range(c(0,max(-log(class.results.capture[,4])+10)))
to.plot <- class.results.capture
pdf("volcano_total.pdf")
plot(xrange,yrange,xlab="Linear Fold Change",ylab="-log(BH FDR Corrected P)",type='n',main="Ctrl vs CD")
points(to.plot[,1][nochange],-log(to.plot[,4][nochange]),col=8,cex=1.5,pch=19)
points(to.plot[,1][up],-log(to.plot[,4][up]),col=2,cex=1.5,pch=19)
points(to.plot[,1][down],-log(to.plot[,4][down]),col=3,cex=1.5,pch=19)
abline(v=-1)
abline(v=1)
abline(h=-log(0.05),lty=2)
abline(v=-1.5,lty=2)
abline(v=1.5,lty=2)
temp <- legend("topright", legend = c(" ", " ", " "),text.width=strwidth("100000000000"),pch=c(19,19,19),xjust=1,yjust=1,title="Difference",col=c(2,8,3),cex=1.5)
a <- paste(c("Up (n=",length(up),")"),collapse="")
b <- paste(c("None (n=",length(nochange),")"),collapse="")
c <- paste(c("Down (n=",length(down),")"),collapse="")
text(temp$rect$left + temp$rect$w, temp$text$y,c(a,b,c), pos = 2)
dev.off()
lll <- read.table("data/data_phospho.txt",header=T,row.names=1)
lll <- read.table("data/data_phospho.txt",header=T,row.names=1)
lll <- read.table("data/data_phospho.txt",header=T,row.names=1)
col.2.use <- c(rep(3,3),rep(2,3))
new.lll <- NULL
for(i in 1:dim(lll)[1]) {
temp1 <- as.numeric(lll[i,])
temp2 <- sum(is.na(temp1))
if(temp2>0) {
print(i)
temp3 <- mean(temp1,na.rm=T)
temp4 <- ifelse(is.na(temp1),temp3,temp1)
new.lll <- rbind(new.lll,temp4)
} else {
new.lll <- rbind(new.lll,temp1)
}
}
dimnames(new.lll) <- dimnames(lll)
temp1 <- new.lll
temp1 <- log(temp1+2,2)
sample.data <- temp1
WorkingList <- vector("list", dim(sample.data)[2])
for ( i in 1:dim(sample.data)[2]) {
WorkingList[[i]] <- as.numeric(sample.data[,i])
}
pdf("pre_norm_box_phospho.pdf")
boxplot(WorkingList,col=col.2.use,outline=FALSE,xlab="Sample Index",ylab="Log2(Detection Value+2)")
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(15,15))
dev.off()
running.normalized <- normalizeBetweenArrays(sample.data,"cyclicloess")
WorkingList <- vector("list", dim(running.normalized)[2])
for ( i in 1:dim(running.normalized)[2]) {
WorkingList[[i]] <- as.numeric(running.normalized[,i])
}
pdf("post_norm_box_phospho.pdf")
boxplot(WorkingList,col=col.2.use,outline=FALSE,xlab="Sample Index",ylab="CyclicLoess(Log2(Detection Value+2))")
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(15,15))
dev.off()
pca.results <- princomp(running.normalized,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
pdf("postnorm_PCA_phospho.pdf")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
dev.off()
group1 <- running.normalized[,col.2.use==3]
g1.mean <- apply(group1,1,mean)
g1.sd <- apply(group1,1,sd)
g1.cv <- (g1.sd/g1.mean)*100
lowess.g1 <- lowess(g1.cv~g1.mean,f=1/32)
group2 <- running.normalized[,col.2.use==2]
g2.mean <- apply(group2,1,mean)
g2.sd <- apply(group2,1,sd)
g2.cv <- (g2.sd/g2.mean)*100
lowess.g2 <- lowess(g2.cv~g2.mean,f=1/32)
xrange <- range(c(1:12))
yrange <- range(c(0:25))
pdf("Noise_phospho.pdf")
plot(xrange,yrange,type='n',xlab="Mean(CyclicLoess(Log2(Detection Value+2)))",ylab="Coefficient of Variation")
points(g1.mean,g1.cv,pch=21,col=8)
points(g2.mean,g2.cv,pch=21,col=8)
lines(lowess.g1,col=3,lwd=2)
lines(lowess.g2,col=2,lwd=2)
abline(h=0)
abline(v=4.5,lty=2,lwd=2)
legend("topright",c("CD","Ctrl"),cex=.8,col=c("green","red"),lty=1,lwd=2)
dev.off()
noise.pick <- 4.5
dim(running.normalized)
rrr <- running.normalized
rrr <- ifelse(rrr<noise.pick,noise.pick,rrr)
temp <- apply(rrr,1,mean)>noise.pick
Final.working.data <- rrr[temp,]
dim(Final.working.data)
write.table(Final.working.data,"Final.working.data_phospho.txt",sep="\t")
pca.results <- princomp(Final.working.data,cor=F)
pca.loadings <- loadings(pca.results)
totalvar <- (pca.results$sdev^2)
variancePer <- round(totalvar/sum(totalvar)*100,1)
variancePer <- variancePer[1:3]
palette("default")
x.range <- range(pca.loadings[,1])
y.range <- range(pca.loadings[,2])
xlab <- paste(c("Principal Component 1 (",variancePer[1],"%)"),collapse="")
ylab <- paste(c("Principal Component 2 (",variancePer[2],"%)"),collapse="")
pdf("post_noise_PCA_phospho.pdf")
plot(pca.loadings[,1],pca.loadings[,2],type='n',xlab=xlab,ylab=ylab,bg="gray")
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col=col.2.use,cex=2,pch=19)
points(pca.loadings[,1],pca.loadings[,2],lwd=0.5,col="black",cex=2,pch=21)
legend("right",c("CD","Ctrl"),cex=.8,col=c("green","red"),pch=c(19,19))
dev.off()
#-------------------------------------------------------------------------------
# Significance Testing
#-------------------------------------------------------------------------------
# Added paired = T for pairwise T test instead of welch
running.pvs <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- as.numeric(Final.working.data[i,c(1:3)])
temp2 <- as.numeric(Final.working.data[i,c(4:6)])
temp3 <- t.test(temp1,temp2,paired = T)
temp4 <- temp3$p.value
temp5 <- mean(temp1)-mean(temp2) #flipped for cushings vs control
temp6 <- 2^temp5
temp7 <- ifelse(temp6<1,-1/temp6,temp6)
running.pvs <- rbind(running.pvs,c(temp7,abs(temp7),temp4))
}
dimnames(running.pvs)[[1]] <- dimnames(Final.working.data)[[1]]
running.means <- NULL
for (i in 1:dim(Final.working.data)[1]) {
# print(i)
temp1 <- mean(as.numeric(Final.working.data[i,c(1:3)]))
temp2 <- mean(as.numeric(Final.working.data[i,c(4:6)]))
running.means <- rbind(running.means,c(temp1,temp2))
}
dimnames(running.means)[[1]] <- dimnames(Final.working.data)[[1]]
write.table(running.means,"running.means_phospho.txt",sep="\t")
temp1 <- mt.rawp2adjp(running.pvs[,3], proc="BH")
temp2 <- temp1$adj[order(temp1$index),]
temp2 <- as.data.frame(temp2)
running.pvs <- cbind(running.pvs,temp2[,2])
write.table(running.pvs,"MCC_Results_phospho.txt",sep="\t")
passing.mcc.frags <- dimnames(running.pvs[running.pvs[,4]<0.05,])[[1]]
length(passing.mcc.frags)
write.table(running.pvs, "running.pvs_pairwise_phospho.txt", sep = "\t")
class.results.capture <- as.matrix(running.pvs)
coded.fc <- ifelse(class.results.capture[,2]>=1.5,1,0)
coded.pv <- ifelse(class.results.capture[,4]<0.05,1,0) #orig = ,4, 0.05
coded.pass <- coded.fc+coded.pv
coded.keepers <- names(coded.pass[coded.pass==2])
grab.keeper.info <- class.results.capture[coded.keepers,]
nochange <- dimnames(class.results.capture[setdiff(dimnames(class.results.capture)[[1]],coded.keepers),])[[1]]
up <- dimnames(grab.keeper.info[(grab.keeper.info[,1]>0),])[[1]]
down <- dimnames(grab.keeper.info[(grab.keeper.info[,1]<0),])[[1]]
xrange <- range(class.results.capture[,1])
yrange <- range(c(0,max(-log(class.results.capture[,4])+10)))
to.plot <- class.results.capture
pdf("volcano_phospho.pdf")
plot(xrange,yrange,xlab="Linear Fold Change",ylab="-log(BH FDR Corrected P)",type='n',main="Ctrl vs CD")
points(to.plot[,1][nochange],-log(to.plot[,4][nochange]),col=8,cex=1.5,pch=19)
points(to.plot[,1][up],-log(to.plot[,4][up]),col=2,cex=1.5,pch=19)
points(to.plot[,1][down],-log(to.plot[,4][down]),col=3,cex=1.5,pch=19)
abline(v=-1)
abline(v=1)
abline(h=-log(0.05),lty=2)
abline(v=-1.5,lty=2)
abline(v=1.5,lty=2)
temp <- legend("topright", legend = c(" ", " ", " "),text.width=strwidth("100000000000"),pch=c(19,19,19),xjust=1,yjust=1,title="Difference",col=c(2,8,3),cex=1.5)
a <- paste(c("Up (n=",length(up),")"),collapse="")
b <- paste(c("None (n=",length(nochange),")"),collapse="")
c <- paste(c("Down (n=",length(down),")"),collapse="")
text(temp$rect$left + temp$rect$w, temp$text$y,c(a,b,c), pos = 2)
dev.off()
rm(list = ls())
q()
